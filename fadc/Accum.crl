#  Source for generic VME readout using a
#  TJNAF trigger supervisor interface register (TIR)
#  as a source for external interrupts
#
#    David Abbott, TJNAF 1996

readout list VME1

maximum 9216,500
vme readout
#ts control

const TIR_ADDR = 0x0ed0
const ADC_ID = 0
const ADC_CH = 0

const usescaler=1
const SCALER_ADDR = 0xceb500

### add sub-bank structures here if I need. 
 
 const TIMING = 0x0210
 const FADC_ACCUM = 0x0211
 const FADC_SAMPLES = 0x0212

## const HTB3 = 0x0210

#include "HAPTB_util.h"
include "scaler1.h"
 
unsigned long laddr;
extern int bigendian_out;

### ok up to here. 

begin download

variable res
unsigned long laddr;
unsigned short temp;

# If the ROC is sending data to Little-Endian EB
# e.g. a x86 Linux CPU then bigendian_out = 0.
# Unless the ROC is also running on a Little-Endian
# machine. Then set bigendian_out=1.
  bigendian_out = 0;


# Setup TIR
  tirInit(TIR_ADDR);

# Setup the HAPTB (Timing Board) 
### need to see which one comes first... 

  initHAPTB(); 
  setTimeHAPTB(200,12000);
#  setTimeHAPTB(20,6000);
#  setTimeHAPTB(20,100);

  sis3320SetupMode(ADC_ID,1);
  sis3320StopDelay(0,100);
  sis3320SetGain(0,-1,1);
  sis3320SetDac(0,45000);
  
 sis3320SetThresh(0, 0, 3690, 500);	
 sis3320SetN5N6(0, 0, 10, 100, 10, 110);

%%
 if (usescaler) {
   res = sysBusToLocalAdrs(0x39, SCALER_ADDR, &laddr);
   if (res != 0) {
      printf("ERROR: cannot address scaler at 0x%x \n",SCALER_ADDR);
      scaen560[0] = 0;
   } else {
      scaen560[0] = (struct caen_v560_scaler *)laddr;
   }
   if (scaen560[0] != 0) {  /* clear scaler */
        printf("Clearing scalers in download \n ");
        scaen560[0]->ClrR=0;
        temp = scaen560[0]->clrVETOR;
   }
 }
%%

  log inform "User Download Executed"

end download

#### ok up to here.     

begin prestart

  log inform "Entering User Prestart"

  init trig source VME
  link async trig source VME 1 to usrtrig and usrtrig_done
  event type 1 then read VME 1

  tir[1]->tir_oport=0xffff;
  printf("Output bits: %x /n", tir[1]->tir_oport);

  log inform "User Prestart Executed"

end prestart



begin end

  CDODISABLE(VME,1,0);

  log inform "User End Executed"

end end


begin pause

  CDODISABLE(VME,1,0);

  log inform "User Pause Executed"

end pause


begin go
  
  unsigned short temp;
  int tmpstat;
  log inform "Entering User Go"

%%
  if (usescaler) {
     if (scaen560[0] != 0) {  /* clear scaler */
        printf("Clearing scalers in go \n");
         scaen560[0]->ClrR=0;
         temp = scaen560[0]->clrVETOR;
     }
  }
  sis3320Disable(ADC_ID);
  sis3320Enable(ADC_ID);
%%


  
 CDOENABLE(VME,1,0);

end go

begin trigger usrtrig

 variable stat, csr, jj
 volatile unsigned short tir_dat;
 rol->dabufp = (long *) 0;

    open event type EVTYPE of BT_BANK 

#### 1st Sub-Bank 


#### 2nd Sub-Bank 

   open bank FADC_ACCUM of BT_UI4

%%
 int i;
 int nextsamplepointer;
 stat = sis3320Finished(ADC_ID);
if(stat>0){
 logMsg("FADC not busy state= %d\n",stat,0,0,0,0,0);
}
//NEXT LINE TEMPORARY DEBUG becuse stat quit working
 stat = 1;
 if(stat>0) {
   *rol->dabufp++ =ADC_CH;
   for (i=0; i<6; i++){
      *rol->dabufp++ = sis3320GetNumAcc(0, ADC_CH>>1, ADC_CH%2, i);
      *rol->dabufp++ = sis3320GetAccum(0,ADC_CH>>1,ADC_CH%2,i,1);
      *rol->dabufp++ = sis3320GetAccum(0,ADC_CH>>1,ADC_CH%2,i,0);
   }
   *rol->dabufp++ = sis3320GetDac(0, ADC_CH);
   *rol->dabufp++ = sis3320GetThresh(0,ADC_CH,1);
   *rol->dabufp++ = sis3320GetThresh(0,ADC_CH,2);
   *rol->dabufp++ = sis3320GetN5N6(0,ADC_CH);
 sis3320Disable(ADC_ID);
 sis3320Enable(ADC_ID);

 } 

else {

   *rol->dabufp++ = 0xda0000da;
   logMsg("ERROR: NO data in ADC  Actual Event Count = 0x%x\n",stat,0,0,0,0,0);
 }
 %%


close bank

#### 3rd Sub-Bank 



   open bank TIMING of BT_UI4

%%

   *rol->dabufp++ = getRampDelayHAPTB();
   *rol->dabufp++ = getIntTimeHAPTB();
/* When standalone, get data from tir_dat; when TS-mode use tir_iport */
   tir_dat = tir[1]->tir_dat; 
   *rol->dabufp++ = (tir_dat & 0xfff);
   if (usescaler && scaen560[0] != 0) {
		*rol->dabufp++ = 0xcae56000;  /* header for scaler */
      for (jj = 0; jj<16; jj++) *rol->dabufp++ = scaen560[0]->CntR[jj];
   }

%%

close bank
## closing of the event which includes the sub-banks. 

 close event 


end trigger

begin done usrtrig
// sis3320Start(ADC_ID);


end done


begin done

# Acknowledge tir register
  CDOACK(VME,1,0);

end done

begin status

end status


