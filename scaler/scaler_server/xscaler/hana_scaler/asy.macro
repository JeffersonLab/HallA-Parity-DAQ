// Hey Emacs this is -*-c++-*- !
// Purpose :  To plot charge asymmetry from the ntuple "ascal" in scaler.root
// Jan 2003
// To judge if the beam cuts are ok, run beam.macro (i.e. root .x beam.macro)

{
   char title[128];
   sprintf(title,"Charge Asymmetries from SpectrometerDAQ Scalers for Run %s",gSystem->Getenv("QASYRUN"));

   c1 = new TCanvas("bob",title,800,600);	

   f = new TFile("scaler.root");
   TNtuple *ntup = (TNtuple*)gROOT.FindObject("ascal");

   pad1 = new TPad("pad1","",0.03,0.50,0.49,0.95,18);
   pad2 = new TPad("pad2","",0.52,0.50,0.98,0.95,18);
   pad3 = new TPad("pad3","",0.03,0.02,0.49,0.45,18);
   pad4 = new TPad("pad4","",0.52,0.02,0.98,0.45,18);

   gStyle->SetOptStat(1);
   gStyle->SetStatH(0.30);
   gStyle->SetStatW(0.35);
   gStyle->SetTitleH(0.12);
   gStyle->SetTitleW(0.7);
   gStyle->SetLabelSize(0.05,"x");
   gStyle->SetLabelSize(0.05,"y");
   gROOT->ForceStyle();


   c1->SetFillColor(42);
   c1->Clear();
   pad1->Draw();
   pad2->Draw();
   pad3->Draw();
   pad4->Draw();

   // Note, the cuts on asymmetry abs(A) < 0.9 seem illegal, but I think
   // they are necessary because some updates are within 1 helicity cycle, 
   // leading to A = 1.0
   // The cuts on current:  u3 > 5000 and u10 > 15000 is roughly > 1.2 uA.

   pad1->cd();
   ntup.Draw("1000000.*au3","u3>8000&&au3>-0.9&&au3<0.9&&time>0");
   htemp.Fit("gaus");
   Float_t mean=htemp.GetMean();
   Float_t rms=htemp.GetRMS();
   TH1F h1("au3","U3 Asy (ppm)   ",100,mean-4*rms,mean+4*rms);
   ntup.Draw("1000000.*au3>>au3");

   pad2->cd();
   ntup.Draw("1000000.*au10","u10>25000&&au10>-0.9&&au10<0.9&&time>0");
   htemp.Fit("gaus");
   Float_t mean=htemp.GetMean();
   Float_t rms=htemp.GetRMS();
   TH1F h2("au10","U10 Asy (ppm)   ",100,mean-4*rms,mean+4*rms);
   ntup.Draw("1000000.*au10>>au10");

   pad3->cd();
   ntup.Draw("1000000.*ad3","d3>8000&&ad3>-0.9&&ad3<0.9&&time>0");
   htemp.Fit("gaus");
   Float_t mean=htemp.GetMean();
   Float_t rms=htemp.GetRMS();
   TH1F h3("ad3","D3 Asy (ppm)   ",100,mean-4*rms,mean+4*rms);
   ntup.Draw("1000000.*ad3>>ad3");

   pad4->cd();
   ntup.Draw("1000000.*ad10","d10>25000&&ad10>-0.9&&ad10<0.9&&time>0");
   htemp.Fit("gaus");
   Float_t mean=htemp.GetMean();
   Float_t rms=htemp.GetRMS();
   TH1F h4("ad10","D10 Asy (ppm)   ",100,mean-4*rms,mean+4*rms);
   ntup.Draw("1000000.*ad10>>ad10");

   c1->Update();

   cout << "\n\nIf you want to see a better fit, try typing .x asyfit.macro"<<endl;
   cout << "That is:   dot x asyfit.macro"<<endl;
   cout << "Otherwise, to type .q  (dot q)"<<endl;

}





